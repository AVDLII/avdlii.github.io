<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>PostgreSQL on Agrielio De Lazo II</title>
    <link>https://avdlii.xyz/tags/postgresql/</link>
    <description>Recent content in PostgreSQL on Agrielio De Lazo II</description>
    <image>
      <url>https://avdlii.xyz/img/terminal.png</url>
      <link>https://avdlii.xyz/img/terminal.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jul 2024 12:32:01 +0800</lastBuildDate><atom:link href="https://avdlii.xyz/tags/postgresql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dockerizing My Backend</title>
      <link>https://avdlii.xyz/posts/dockerized-postgres/</link>
      <pubDate>Tue, 02 Jul 2024 12:32:01 +0800</pubDate>
      
      <guid>https://avdlii.xyz/posts/dockerized-postgres/</guid>
      <description>Trying out PostgreSQL on Docker for my python app</description>
      <content:encoded><![CDATA[<p>As said in my earlier post, my python application has a PostgreSQL backend running on a separate VM. But in order to fully appreciate Docker, I decided to try out PostgreSQL on Docker.</p>
<p>First, let&rsquo;s pull the official PostgreSQL image for alpine</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ docker pull postgres:15-alpine
</span></span></code></pre></div><p>Then run the image and include the environment variable <code>POSTGRES_PASSWORD</code> for now. We will also add a volume for data persistence.</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ docker run -itd --rm --name psql <span style="color:#b8bb26">\
</span></span></span><span style="display:flex;"><span><span style="color:#b8bb26"></span>&gt; -e POSTGRES_PASSWORD<span style="color:#fe8019">=</span>******** <span style="color:#b8bb26">\
</span></span></span><span style="display:flex;"><span><span style="color:#b8bb26"></span>&gt; -v ./dbdata:/var/lib/postgresql/data <span style="color:#b8bb26">\
</span></span></span><span style="display:flex;"><span><span style="color:#b8bb26"></span>&gt; postgres:15-alpine
</span></span></code></pre></div><p>Now, let&rsquo;s look at the container ip address so we can access it using <code>psql</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ docker inspect bridge
</span></span><span style="display:flex;"><span><span style="color:#928374;font-style:italic"># output truncated</span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#b8bb26">&#34;ConfigOnly&#34;</span>: false,
</span></span><span style="display:flex;"><span>        <span style="color:#b8bb26">&#34;Containers&#34;</span>: <span style="color:#fe8019">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#b8bb26">&#34;6c414502dbe431761f838726180b073b579a855c178a996ff57e9b8510a33f4d&#34;</span>: <span style="color:#fe8019">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#b8bb26">&#34;Name&#34;</span>: <span style="color:#b8bb26">&#34;psql&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#b8bb26">&#34;EndpointID&#34;</span>: <span style="color:#b8bb26">&#34;562ba21b5b1c1cf18e535887c0c77366f6f087c4f2db6b154e0ccdb7f970eede&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#b8bb26">&#34;MacAddress&#34;</span>: <span style="color:#b8bb26">&#34;22:81:bd:2d:1c:52&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#b8bb26">&#34;IPv4Address&#34;</span>: <span style="color:#b8bb26">&#34;172.17.0.2/16&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#b8bb26">&#34;IPv6Address&#34;</span>: <span style="color:#b8bb26">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#fe8019">}</span>
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>To access the container using <code>psql</code></p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ psql -h 172.17.0.2 -d postgres -U postgres
</span></span><span style="display:flex;"><span>Password <span style="color:#fe8019">for</span> user postgres:
</span></span><span style="display:flex;"><span>psql <span style="color:#fe8019">(</span>14.12 <span style="color:#fe8019">(</span>Ubuntu 14.12-0ubuntu0.22.04.1<span style="color:#fe8019">)</span>, server 15.7<span style="color:#fe8019">)</span>
</span></span><span style="display:flex;"><span>WARNING: psql major version 14, server major version 15.
</span></span><span style="display:flex;"><span>         Some psql features might not work.
</span></span><span style="display:flex;"><span>Type <span style="color:#b8bb26">&#34;help&#34;</span> <span style="color:#fe8019">for</span> help.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>postgres<span style="color:#fe8019">=</span><span style="color:#928374;font-style:italic">#</span>
</span></span></code></pre></div><blockquote>
<p>The warning message is because I have a version 14 <code>psql</code> installed on my machine but I accessed a version 15 server</p>
</blockquote>
<p>That&rsquo;s it! Now, I can configure my python application to connect to this database container and I will then deploy them using <code>docker-compose</code></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
