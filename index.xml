<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Agrielio De Lazo II</title>
    <link>https://avdlii.xyz/</link>
    <description>Recent content on Agrielio De Lazo II</description>
    <image>
      <url>https://avdlii.xyz/img/terminal.png</url>
      <link>https://avdlii.xyz/img/terminal.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Aug 2024 19:48:06 +0800</lastBuildDate><atom:link href="https://avdlii.xyz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Troubeshooting Homelab Issue: Media Server</title>
      <link>https://avdlii.xyz/posts/troubeshooting-jellyfin-server/</link>
      <pubDate>Sat, 03 Aug 2024 19:48:06 +0800</pubDate>
      
      <guid>https://avdlii.xyz/posts/troubeshooting-jellyfin-server/</guid>
      <description>Troubleshooting my media server issues</description>
      <content:encoded><![CDATA[<p>Did you ever experience this kind of scenario?</p>
<p>You wake up, do your usual morning routine. Wake your machine up, glance at the server dashboard where everything seems fine. Why wouldn&rsquo;t it be when you just used it last night before sleep? But its not. Everything is not working.</p>
<p>This is what happened to me today. I was having my usual morning routine, and upon opening my media server I got an error message <code>Playback error</code> which is weird because I played this same media file last night</p>
<p>How? Why?</p>
<p>I use this server everyday. I used it last night. And when I woke up it doesn&rsquo;t work anymore.</p>
<p>So then, time to spend my weekend putting on my imaginary &lsquo;deer stalker&rsquo; hat and Sherlock the crap out of this.</p>
<h2 id="docker">Docker</h2>
<p>First suspect is of course, the one who should be running things: Docker.</p>
<p>I spent a good amount of time analyzing my <code>docker-compose</code> file. Everything seems in order. I changed the volume mounts of the media files for my jellyfin server in case this is a permission issue.
<br>
No change.
<br>
I changed the ports because maybe something is interfering with the port number of jellyfin.
<br>
Problem persists.
<br>
I then tried to upgrade the docker and docker-compose version.
<br>
No dice.
<br>
So okay.. maybe docker is innocent, but I&rsquo;m keeping a close eye..</p>
<h2 id="jellyfin">Jellyfin</h2>
<p>Next suspect: Jellyfin</p>
<p>Maybe the application had an update? Maybe some configuration changed along with the update? I scoured their official github page and their official website for references but there&rsquo;s no such update. If anything, Jellyfin is quite stable.
<br>
I then checked the page if there are misconfigurations that I somehow did. But, the server is working for almost a month now. Why now? Why today?
<br>
Jellyfin seems good.. moving on.</p>
<h2 id="linux-ownerships-and-permissions">Linux (Ownerships and Permissions)</h2>
<p>After checking Jellyfin and coming up empty, I decided to focus my attention to the OS. I checked some files in my media directory. Yeah, some files still have <code>root:root</code> ownerships with <code>700</code> permissions. Maybe if I change that, the error will be fixed.</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo chown -R dufresne:dufresne /opt/jellyfin_media
</span></span><span style="display:flex;"><span>sudo chmod -R <span style="color:#d3869b">755</span> /opt/jellyfin_media
</span></span></code></pre></div><p>Still nothing! Same error.</p>
<h2 id="browser-compatibility">Browser compatibility</h2>
<p>I maybe grasping at straws with this one but better to leave no stones unturned.
<br>
I used every browser I know of: Google Chrome, Safari, Firefox, Arc, Opera</p>
<p>Yup, same issue. At this point, I am close to making a new virtual machine and delete the old one, but should the issue come up again, would I remake another VM in order to fix things? No. I don&rsquo;t need a band-aid. I need a fix..</p>
<h2 id="linux-disks">Linux (Disks)</h2>
<p>My homelab has a passthrough to my old external hard drive. The hard drive itself is quite old. So maybe this is a hardware issue? To test this, I plugged my external hard drive in my other machine and spin up a jellyfin container just to test if the media is playable.
<br>
And what do you know? It played.
<br>
<br>
I learned two things from this:</p>
<ol>
<li>The disk is okay. (Kudos to Western Digital, this has been my external hard drive since 2013)</li>
<li>The issue is isolated within my homelab. Since the media played in my other machine.
<br>
<br>
There&rsquo;s hope after all..</li>
</ol>
<h2 id="proxmox">Proxmox</h2>
<p>Since this maybe a homelab issue, I dove into my homelab OS: Proxmox.</p>
<p>I checked if I am running out of storage. Thankfully I am not. I checked for VM settings, I&rsquo;ve read somewhere that sometimes disks re-mount themselves, coming up with different UUIDs. Different UUIDs are problematic in a media server since the metadata is referencing the disk mounts.
<br>
I cannot find evidence that the disks re-mounted so what I did was delete all the metadata in the jellyfin volume mount and created a fresh container instance of jellyfin.</p>
<p>I waited for half an hour for Jellyfin to complete the metadata downloads (movie/show posters, casts, ratings, synopsis, etc), and then I tried to play a movie.. Same error.
<br>
This is insane. I essentially wiped the entire docker instance and recreate a fresh one. And still it does not work.</p>
<h2 id="alternatives">Alternatives</h2>
<p>I decided to cool my mind and watch a show on my phone instead. Since Jellyfin has a mobile app, I just have to enter the server&rsquo;s address and I can watch from my phone.</p>
<p>Then it hit me. All media files are working..
<br>
<br>
I entered the server&rsquo;s address using the IP:Port combo since I did not put the DNS server in my phone&rsquo;s network.
<br>
<br>
I immediately test it out. I go to my browser, instead of using <code>jellyfin.homelab.local</code>, I used <code>192.168.x.x:8096</code>.
<br>
<br>
And it worked!!
<br>
<br>
Now I know this is not fixed yet, but the pool of suspects just became very small.
<br>
<br>
To recap, this is how DNS works in my homelab:
<img loading="lazy" src="/pic9.png" type="" alt="homelab-dns"  title="my-homelab-dns"  /></p>
<p>Clearly, the suspects are between these two: Pihole and Nginx Servers
<br>
Since Nginx is the reverse proxy, I decided to first test my DNS Pihole.
<br>
<br>
The way my DNS is setup is all the domain names are pointed to one IP Address: Nginx. This way, Nginx can be the reverse proxy since pihole DNS cannot handle port numbers.
<br>
<br>
For my testing, I changed the IP address of <code>jellyfin.homelab.local</code> to directly point at the jellyfin server instead of Nginx:
<img loading="lazy" src="/pic10.png" type="" alt="pihole-dns"  title="pihole-dns"  /></p>
<p>Because Pihole cannot handle port numbers, I have to manually enter it in the URL: <code>jellyfin.homelab.local:8096</code>
<br>
<br>
And again, everything works!
<br>
<br>
Pihole is eliminated from the  suspect list. All that remains is the Nginx server.</p>
<h2 id="the-problem">The Problem</h2>
<p>Upon <code>ssh</code>-ing inside the server, I did all of the applicable steps I did in troubleshooting the jellyfin docker: Inspect the <code>docker-compose</code> file, double-check the file ownerships and permissions of the volume mounts, check port disks issues.</p>
<p>And there it was.. As I checked the server&rsquo;s disk utilization:
<img loading="lazy" src="/pic11.png" type="" alt="nginxdisk"  title="nginx-util"  />
The disk was fully utilized, and so nginx cannot properly do its main function because it cannot save new data anymore.
<br>
<br>
In hindsight, this may have been a very short investigation had I went over the basics first instead of the complicated ones. Oh well.. live and learn.
<br>
<br>
I learned a lot with this experience. This is the good thing about having a homelab. I am always learning, re-learning and realizing new things everyday.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Homelab Update: Proxmox</title>
      <link>https://avdlii.xyz/posts/homelab-update-2/</link>
      <pubDate>Thu, 18 Jul 2024 16:11:30 +0800</pubDate>
      
      <guid>https://avdlii.xyz/posts/homelab-update-2/</guid>
      <description>Homelab hosted on a dedicated server</description>
      <content:encoded><![CDATA[<p>I would like to share my updated homelab. I pulled the trigger and bought an old/used mini PC. The specs are decent enough for my own use-case and I think for its performance, it is worth the price.</p>
<p>For starters, I decided to use Proxmox as my main homelab OS. At first I thought I would just test it out and see what happens but the more I tinker with it, the more I am liking it so I stuck with Proxmox. I also like the added benefit of spinning up a new VM in the web interface.
<img loading="lazy" src="/pic8.png" type="" alt="proxmox"  title="my-proxmox"  />
<br>
<br>
This is now my updated homelab diagram. It is still as simple as the previous one but I am working on making it more like into more of a production-grade environment:
<img loading="lazy" src="/pic7.png" type="" alt="homelab-diagram-udpated"  title="Homelab-diagram-updated-1"  />
<br>
<br>
Nothing has changed from my previous setup. I am still running <code>Pi-hole</code> as my ad-blocker and DNS coupled with <code>Nginx Proxy Manager</code> for reverse proxy and resolving hostnames (I will also work on adding SSL certificates in my homelab with this). I am still hosting my media server <code>Jellyfin</code> for our family entertainment needs. And of course, <code>Grafana</code> and <code>Prometheus</code> for my monitoring stack.
<br>
<br>
The only thing that changed is that I am now hosting separate instances of <code>node_exporter</code> and connecting them all to a centralized <code>Prometheus</code> server so that I can monitor servers remotely outside <code>Prometheus</code>&rsquo; docker network. And also, this is where I will spin up my <code>kubernetes</code> testing lab.
<br>
<br>
This week has been very productive so far and I am learning a lot!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Homelab Self-hosting Update</title>
      <link>https://avdlii.xyz/posts/homelab-update/</link>
      <pubDate>Sun, 14 Jul 2024 14:28:30 +0800</pubDate>
      
      <guid>https://avdlii.xyz/posts/homelab-update/</guid>
      <description>A more robust homelab environment</description>
      <content:encoded><![CDATA[<p>This past week, all I did was update and refine my homelab environment. I am doing all the setup on my old Ubuntu PC and deploying my applications on docker containers. It was a lot of funand I am learning a lot.</p>
<p>For those who don&rsquo;t know me, I love watching (and rewatching) movies and TV shows. Especially those that left a mark in my brain. So when I found out that I can self-host my own media server, I was amazed. And with that, I fell into the rabbithole of self-hosting and homelabbing.</p>
<p>I want to share my homelab diagram. This is just the basic setup and I will update it as I go. I might even buy an old mini PC to use as a server. But now, this will do:</p>
<p><img loading="lazy" src="/pic6.png" type="" alt="homelab-diagram"  title="Homelab-diagram-1"  /></p>
<h3 id="pi-hole">Pi-hole</h3>
<p>PiHole is a network-wide adblocking application that acts as my DNS for my other applications.</p>
<h3 id="nginx-proxy-manager">Nginx Proxy Manager</h3>
<p>Nginx Proxy Manager is my reverse proxy server for redirecting the server requests on my private network to their respective IP/ports.</p>
<h3 id="jellyfin">Jellyfin</h3>
<p>My self-hosted media server. All the users in our home network can access my Jellyfin server to watch movies and shows.</p>
<h3 id="vaultwarden">Vaultwarden</h3>
<p>My password manager for all my sites. I think this is much safer since this is privately-hosted.</p>
<h3 id="prometheus-grafana-cadvisor">Prometheus, Grafana, CAdvisor</h3>
<p>As I discussed in my previous post, this monitoring stack provides data that is converted into a visualized graphs for monitoring my containers&rsquo; resources.
<br>
<br>
<br>
<br>
As of now, I am deploying all of this in a single docker compose file. But as this setup becomes more static, I am gonna use Portainer for my container management.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Prometheus Grafana Simulation</title>
      <link>https://avdlii.xyz/posts/prometheus-grafana-test/</link>
      <pubDate>Mon, 08 Jul 2024 16:12:48 +0800</pubDate>
      
      <guid>https://avdlii.xyz/posts/prometheus-grafana-test/</guid>
      <description>Testing the Prometheus Grafana Stack using Docker Compose</description>
      <content:encoded><![CDATA[<p>It&rsquo;s been a while since I heard about Prometheus and Grafana.</p>
<p>It is an observability stack that can be used to monitor container resources.</p>
<p>Prometheus is for gathering and consolidating the resources data scraped from the containers and Grafana is for data visualization.</p>
<p>I decided to try it out for myself and use it for my future homelab projects!</p>
<p>Below is the <code>docker-compose.yml</code> file I used</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#fb4934">volumes</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#fb4934">prometheus-data</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">driver</span>: local
</span></span><span style="display:flex;"><span>  <span style="color:#fb4934">grafana-data</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">driver</span>: local
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fb4934">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#fb4934">prometheus</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">image</span>: docker.io/prom/prometheus:v2.53.0
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">container_name</span>: prometheus
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#d3869b">9090</span>:<span style="color:#d3869b">9090</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">command</span>: <span style="color:#b8bb26">&#34;--config.file=/etc/prometheus/prometheus.yaml&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">volumes</span>:
</span></span><span style="display:flex;"><span>      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
</span></span><span style="display:flex;"><span>      - prometheus-data:/prometheus
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">restart</span>: unless-stopped
</span></span><span style="display:flex;"><span>  <span style="color:#fb4934">grafana</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">image</span>: docker.io/grafana/grafana-oss:11.1.0
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">container_name</span>: grafana
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#d3869b">3000</span>:<span style="color:#d3869b">3000</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">volumes</span>:
</span></span><span style="display:flex;"><span>      - grafana-data:/var/lib/grafana
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">restart</span>: unless-stopped
</span></span><span style="display:flex;"><span>  <span style="color:#fb4934">node_exporter</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">image</span>: quay.io/prometheus/node-exporter:v1.1.0
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">container_name</span>: node_exporter
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">command</span>: <span style="color:#b8bb26">&#34;--path.rootfs=/host&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">pid</span>: host
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">restart</span>: unless-stopped
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">volumes</span>:
</span></span><span style="display:flex;"><span>      - /:/host:ro,rslave
</span></span><span style="display:flex;"><span>  <span style="color:#fb4934">cadvisor</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">image</span>: gcr.io/cadvisor/cadvisor:v0.49.1
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">container_name</span>: cadvisor
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#d3869b">8080</span>:<span style="color:#d3869b">8080</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">volumes</span>:
</span></span><span style="display:flex;"><span>      - /:/rootfs:ro
</span></span><span style="display:flex;"><span>      - /run:/run:ro
</span></span><span style="display:flex;"><span>      - /sys:/sys:ro
</span></span><span style="display:flex;"><span>      - /var/lib/docker:/var/lib/docker:ro
</span></span><span style="display:flex;"><span>      - /dev/disk:/dev/disk:ro
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">devices</span>:
</span></span><span style="display:flex;"><span>      - /dev/kmsg
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">privileged</span>: <span style="color:#fe8019">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">restart</span>: unless-stopped
</span></span></code></pre></div><h3 id="breakdown">Breakdown</h3>
<p>The first service is for Prometheus. I used version 2.53 and created volumes for the configuration file and the main prometheus data persistency:</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#fb4934">prometheus</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">image</span>: docker.io/prom/prometheus:v2.53.0
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">container_name</span>: prometheus
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#d3869b">9090</span>:<span style="color:#d3869b">9090</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">command</span>: <span style="color:#b8bb26">&#34;--config.file=/etc/prometheus/prometheus.yaml&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">volumes</span>:
</span></span><span style="display:flex;"><span>      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
</span></span><span style="display:flex;"><span>      - prometheus-data:/prometheus
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">restart</span>: unless-stopped
</span></span></code></pre></div><p>Next is Grafana, our data visualizer using the data gathered by Prometheus</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#fb4934">grafana</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">image</span>: docker.io/grafana/grafana-oss:11.1.0
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">container_name</span>: grafana
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#d3869b">3000</span>:<span style="color:#d3869b">3000</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">volumes</span>:
</span></span><span style="display:flex;"><span>      - grafana-data:/var/lib/grafana
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">restart</span>: unless-stopped
</span></span></code></pre></div><p>Then there&rsquo;s Node Exporter, which Prometheus use to gather host resources metrics</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#fb4934">node_exporter</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">image</span>: quay.io/prometheus/node-exporter:v1.1.0
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">container_name</span>: node_exporter
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">command</span>: <span style="color:#b8bb26">&#34;--path.rootfs=/host&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">pid</span>: host
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">restart</span>: unless-stopped
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">volumes</span>:
</span></span><span style="display:flex;"><span>      - /:/host:ro,rslave
</span></span></code></pre></div><p>And lastly, CAdvisor, which Prometheus use to gather resource metrics of our docker containers</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#fb4934">cadvisor</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">image</span>: gcr.io/cadvisor/cadvisor:v0.49.1
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">container_name</span>: cadvisor
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#d3869b">8080</span>:<span style="color:#d3869b">8080</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">volumes</span>:
</span></span><span style="display:flex;"><span>      - /:/rootfs:ro
</span></span><span style="display:flex;"><span>      - /run:/run:ro
</span></span><span style="display:flex;"><span>      - /sys:/sys:ro
</span></span><span style="display:flex;"><span>      - /var/lib/docker:/var/lib/docker:ro
</span></span><span style="display:flex;"><span>      - /dev/disk:/dev/disk:ro
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">devices</span>:
</span></span><span style="display:flex;"><span>      - /dev/kmsg
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">privileged</span>: <span style="color:#fe8019">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">restart</span>: unless-stopped
</span></span></code></pre></div><p>Apparently, CAdvisor and Node Exporter needs access to the root directory, so do not deploy it on an unsecured environment.</p>
<p>This is quite nice!</p>
<p><img loading="lazy" src="/pic4.png" type="" alt="grafana-dashboard"  /></p>
<blockquote>
<p>This dashboard is from the <code>cadvisor</code> data</p>
</blockquote>
<p><img loading="lazy" src="/pic5.png" type="" alt="grafana-dashboard-2"  /></p>
<blockquote>
<p>This dashboard is from the <code>node-exporter</code> data. That&rsquo;s a lot of metrics!</p>
</blockquote>
<p>I can&rsquo;t wait to deploy these along with my self-hosted homelab servers.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Homelab Ideas</title>
      <link>https://avdlii.xyz/posts/homelab-ideas/</link>
      <pubDate>Mon, 08 Jul 2024 13:12:43 +0800</pubDate>
      
      <guid>https://avdlii.xyz/posts/homelab-ideas/</guid>
      <description>Brainstorming homelab ideas</description>
      <content:encoded><![CDATA[<p>I&rsquo;m considering transforming my Windows PC into a homelab. Currently, it runs both Windows and Ubuntu in dual-boot mode, allowing me to <code>ssh</code> into Ubuntu and create virtual machines using <code>virsh</code> for testing and simulation.</p>
<p>As I research more, I discovered numerous services and applications that I could host on this older PC.</p>
<p>To start, since I primarily use this PC for virtual machines, why not experiment with Proxmox? Additionally, as for watching TV series and movies, hosting my own Jellyfin server sounds exciting. Concerned about managing passwords across different sites? I&rsquo;ll set up my own Bitwarden server.</p>
<p>The possibilities are just too many to ignore so I think I&rsquo;m gonna do it.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Dockerizing My Backend</title>
      <link>https://avdlii.xyz/posts/dockerized-postgres/</link>
      <pubDate>Tue, 02 Jul 2024 12:32:01 +0800</pubDate>
      
      <guid>https://avdlii.xyz/posts/dockerized-postgres/</guid>
      <description>Trying out PostgreSQL on Docker for my python app</description>
      <content:encoded><![CDATA[<p>As said in my earlier post, my python application has a PostgreSQL backend running on a separate VM. But in order to fully appreciate Docker, I decided to try out PostgreSQL on Docker.</p>
<p>First, let&rsquo;s pull the official PostgreSQL image for alpine</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ docker pull postgres:15-alpine
</span></span></code></pre></div><p>Then run the image and include the environment variable <code>POSTGRES_PASSWORD</code> for now. We will also add a volume for data persistence.</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ docker run -itd --rm --name psql <span style="color:#b8bb26">\
</span></span></span><span style="display:flex;"><span><span style="color:#b8bb26"></span>&gt; -e POSTGRES_PASSWORD<span style="color:#fe8019">=</span>******** <span style="color:#b8bb26">\
</span></span></span><span style="display:flex;"><span><span style="color:#b8bb26"></span>&gt; -v ./dbdata:/var/lib/postgresql/data <span style="color:#b8bb26">\
</span></span></span><span style="display:flex;"><span><span style="color:#b8bb26"></span>&gt; postgres:15-alpine
</span></span></code></pre></div><p>Now, let&rsquo;s look at the container ip address so we can access it using <code>psql</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ docker inspect bridge
</span></span><span style="display:flex;"><span><span style="color:#928374;font-style:italic"># output truncated</span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#b8bb26">&#34;ConfigOnly&#34;</span>: false,
</span></span><span style="display:flex;"><span>        <span style="color:#b8bb26">&#34;Containers&#34;</span>: <span style="color:#fe8019">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#b8bb26">&#34;6c414502dbe431761f838726180b073b579a855c178a996ff57e9b8510a33f4d&#34;</span>: <span style="color:#fe8019">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#b8bb26">&#34;Name&#34;</span>: <span style="color:#b8bb26">&#34;psql&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#b8bb26">&#34;EndpointID&#34;</span>: <span style="color:#b8bb26">&#34;562ba21b5b1c1cf18e535887c0c77366f6f087c4f2db6b154e0ccdb7f970eede&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#b8bb26">&#34;MacAddress&#34;</span>: <span style="color:#b8bb26">&#34;22:81:bd:2d:1c:52&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#b8bb26">&#34;IPv4Address&#34;</span>: <span style="color:#b8bb26">&#34;172.17.0.2/16&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#b8bb26">&#34;IPv6Address&#34;</span>: <span style="color:#b8bb26">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#fe8019">}</span>
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>To access the container using <code>psql</code></p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ psql -h 172.17.0.2 -d postgres -U postgres
</span></span><span style="display:flex;"><span>Password <span style="color:#fe8019">for</span> user postgres:
</span></span><span style="display:flex;"><span>psql <span style="color:#fe8019">(</span>14.12 <span style="color:#fe8019">(</span>Ubuntu 14.12-0ubuntu0.22.04.1<span style="color:#fe8019">)</span>, server 15.7<span style="color:#fe8019">)</span>
</span></span><span style="display:flex;"><span>WARNING: psql major version 14, server major version 15.
</span></span><span style="display:flex;"><span>         Some psql features might not work.
</span></span><span style="display:flex;"><span>Type <span style="color:#b8bb26">&#34;help&#34;</span> <span style="color:#fe8019">for</span> help.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>postgres<span style="color:#fe8019">=</span><span style="color:#928374;font-style:italic">#</span>
</span></span></code></pre></div><blockquote>
<p>The warning message is because I have a version 14 <code>psql</code> installed on my machine but I accessed a version 15 server</p>
</blockquote>
<p>That&rsquo;s it! Now, I can configure my python application to connect to this database container and I will then deploy them using <code>docker-compose</code></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>My First Gitlab CI</title>
      <link>https://avdlii.xyz/posts/first-gitlab-ci/</link>
      <pubDate>Thu, 27 Jun 2024 16:42:14 +0800</pubDate>
      
      <guid>https://avdlii.xyz/posts/first-gitlab-ci/</guid>
      <description>Implemented my very first Gitlab CI</description>
      <content:encoded><![CDATA[<p>This afternoon, I have successfully implemented my first Gitlab CI pipeline!</p>
<p>The application I have done is made from python flask which I followed thanks to this <a href="https://www.youtube.com/watch?v=tBmRjtoEBzw">tutorial</a>. I connected this app to an external <code>PostgreSQL</code> database running on a separate KVM instance in my network. Here&rsquo;s the preview:</p>
<p><img loading="lazy" src="/pic2.png" type="" alt="python-shopping-list-app"  /></p>
<blockquote>
<p>Yeah, I know that&rsquo;s not the prettiest to look at. But my priority is to make a functioning application first. I will modify it with CSS later (using my pipeline, of course!)</p>
</blockquote>
<p>Once I have done this, I turned it into a docker container. Here&rsquo;s the <code>Dockerfile</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-docker" data-lang="docker"><span style="display:flex;"><span><span style="color:#fe8019">FROM</span><span style="color:#b8bb26"> python:3.8-alpine</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fe8019">WORKDIR</span><span style="color:#b8bb26"> /flask-postgresql</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fe8019">COPY</span> requirements.txt requirements.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fe8019">RUN</span> pip3 install -r requirements.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fe8019">COPY</span> . .
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fe8019">CMD</span> [ <span style="color:#b8bb26">&#34;python3&#34;</span>, <span style="color:#b8bb26">&#34;-m&#34;</span>, <span style="color:#b8bb26">&#34;flask&#34;</span>, <span style="color:#b8bb26">&#34;run&#34;</span>, <span style="color:#b8bb26">&#34;--host=0.0.0.0&#34;</span>]
</span></span></code></pre></div><p>Then I went and tested it locally before pushing it into my DockerHub repo:</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker build . -t <span style="color:#fe8019">[</span>docker_username<span style="color:#fe8019">]</span>/python-gitlab-ci:0.1
</span></span><span style="display:flex;"><span>docker run --name app1 -p 5000:5000 <span style="color:#fe8019">[</span>docker_username<span style="color:#fe8019">]</span>/python-gitlab-ci:0.1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#928374;font-style:italic"># When confirmed working, it&#39;s time to push it into my dockerhub repo</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker push <span style="color:#fe8019">[</span>docker_username<span style="color:#fe8019">]</span>/python-gitlab-ci:0.1
</span></span></code></pre></div><p>I can then establish my CI pipeline by creating a <code>.gitlab-ci.yml</code> file inside my repo root directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#fb4934">variables</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#fb4934">IMAGE_NAME</span>: [docker_username]/python-gitlab-ci
</span></span><span style="display:flex;"><span>  <span style="color:#fb4934">IMAGE_VERSION</span>: <span style="color:#d3869b">0.1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fb4934">build_image</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#fb4934">image</span>: docker:26.1.4
</span></span><span style="display:flex;"><span>  <span style="color:#fb4934">services</span>:
</span></span><span style="display:flex;"><span>    - docker:26.1.4-dind
</span></span><span style="display:flex;"><span>  <span style="color:#fb4934">variables</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">IMAGE_TAG</span>: python-app
</span></span><span style="display:flex;"><span>    <span style="color:#fb4934">DOCKER_TLS_CERTDIR</span>: <span style="color:#b8bb26">&#34;/certs&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#fb4934">before_script</span>:
</span></span><span style="display:flex;"><span>    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
</span></span><span style="display:flex;"><span>  <span style="color:#fb4934">script</span>:
</span></span><span style="display:flex;"><span>    - docker build . -t $IMAGE_NAME:$IMAGE_TAG-$IMAGE_VERSION
</span></span><span style="display:flex;"><span>    - docker push $IMAGE_NAME:$IMAGE_TAG-$IMAGE_VERSION
</span></span></code></pre></div><p>Now everytime I push some changes in my local Gitlab repo, the CI pipeline will trigger and push the new container image to my dockerhub:</p>
<p><img loading="lazy" src="/pic3.png" type="" alt="gitlab-ci-img"  /></p>
<p>I will use this pipeline as I modify my python-flask application&rsquo;s CSS style.</p>
<p>However, this pipeline is still incomplete. I need to add a testing stage to test my Python code before building the image. Additionally, I require a deployment stage to deploy the container to my Kubernetes cluster.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Back to Basics</title>
      <link>https://avdlii.xyz/posts/back-to-basics/</link>
      <pubDate>Wed, 26 Jun 2024 14:41:49 +0800</pubDate>
      
      <guid>https://avdlii.xyz/posts/back-to-basics/</guid>
      <description>Going back to my roots</description>
      <content:encoded><![CDATA[<p>While tidying up old files on my computer, I came across a PDF document: my first job &rsquo;entrance exam&rsquo; from three years ago. It was structured like an RHCSA exam, presenting real-life scenarios solved entirely through command-line tasks. Seeing this reminded me of my progress.</p>
<p>Inspired by this discovery, I&rsquo;ve decided to revisit these exercises. However, this time, I&rsquo;ll tackle them using Ansible. Here’s a snippet focusing on the user management section, as the full exam consists of 27 items.</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>- <span style="color:#fb4934">hosts</span>: rh8-an1
</span></span><span style="display:flex;"><span>  <span style="color:#fb4934">tasks</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#fb4934">name</span>: Create groups
</span></span><span style="display:flex;"><span>      <span style="color:#fb4934">become</span>: <span style="color:#fe8019">yes</span>
</span></span><span style="display:flex;"><span>      <span style="color:#fb4934">group</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#fb4934">name</span>: <span style="color:#b8bb26">&#34;{{ item }}&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#fb4934">loop</span>:
</span></span><span style="display:flex;"><span>        - redhat
</span></span><span style="display:flex;"><span>        - tech
</span></span><span style="display:flex;"><span>        - edb
</span></span><span style="display:flex;"><span>        - manager
</span></span><span style="display:flex;"><span>        - manage
</span></span><span style="display:flex;"><span>        - elk
</span></span><span style="display:flex;"><span>        - jboss
</span></span><span style="display:flex;"><span>        - admin
</span></span><span style="display:flex;"><span>    - <span style="color:#fb4934">name</span>: Create users with groups
</span></span><span style="display:flex;"><span>      <span style="color:#fb4934">become</span>: <span style="color:#fe8019">yes</span>
</span></span><span style="display:flex;"><span>      <span style="color:#fb4934">user</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#fb4934">name</span>: <span style="color:#b8bb26">&#34;{{ item.name }}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#fb4934">groups</span>: <span style="color:#b8bb26">&#34;{{ item.group }}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#fb4934">state</span>: present
</span></span><span style="display:flex;"><span>        <span style="color:#fb4934">append</span>: <span style="color:#fe8019">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#fb4934">loop</span>:
</span></span><span style="display:flex;"><span>        - { <span style="color:#fb4934">name: &#39;robin&#39;, group</span>: <span style="color:#b8bb26">&#39;redhat,tech&#39;</span> }
</span></span><span style="display:flex;"><span>        - { <span style="color:#fb4934">name: &#39;anthony&#39;, group</span>: <span style="color:#b8bb26">&#39;edb,rtm&#39;</span> }
</span></span><span style="display:flex;"><span>        - { <span style="color:#fb4934">name: &#39;samuel&#39;, group</span>: <span style="color:#b8bb26">&#39;manage,&#39;</span> }
</span></span><span style="display:flex;"><span>        - { <span style="color:#fb4934">name: &#39;julie&#39;, group</span>: <span style="color:#b8bb26">&#39;elk,rtm&#39;</span> }
</span></span><span style="display:flex;"><span>        - { <span style="color:#fb4934">name: &#39;wilson&#39;, group</span>: <span style="color:#b8bb26">&#39;jboss,rtm&#39;</span> }
</span></span><span style="display:flex;"><span>        - { <span style="color:#fb4934">name: &#39;sora&#39;, group</span>: <span style="color:#b8bb26">&#39;admin&#39;</span> }
</span></span><span style="display:flex;"><span>    - <span style="color:#fb4934">name</span>: Create directories and change group ownership based on respective group
</span></span><span style="display:flex;"><span>      <span style="color:#fb4934">become</span>: <span style="color:#fe8019">yes</span>
</span></span><span style="display:flex;"><span>      <span style="color:#fb4934">file</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#fb4934">path</span>: <span style="color:#b8bb26">&#34;/mnt/abc_solutions/{{ item.name }}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#fb4934">group</span>: <span style="color:#b8bb26">&#34;{{ item.group }}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#fb4934">state</span>: directory
</span></span><span style="display:flex;"><span>      <span style="color:#fb4934">loop</span>:
</span></span><span style="display:flex;"><span>        - { <span style="color:#fb4934">name: &#39;redhat&#39;, group</span>: <span style="color:#b8bb26">&#39;redhat&#39;</span> }
</span></span><span style="display:flex;"><span>        - { <span style="color:#fb4934">name: &#39;edb&#39;, group</span>: <span style="color:#b8bb26">&#39;edb&#39;</span> }
</span></span><span style="display:flex;"><span>        - { <span style="color:#fb4934">name: &#39;manage&#39;, group</span>: <span style="color:#b8bb26">&#39;manage&#39;</span> }
</span></span><span style="display:flex;"><span>        - { <span style="color:#fb4934">name: &#39;elk&#39;, group</span>: <span style="color:#b8bb26">&#39;elk&#39;</span> }
</span></span><span style="display:flex;"><span>        - { <span style="color:#fb4934">name: &#39;jboss&#39;, group</span>: <span style="color:#b8bb26">&#39;jboss&#39;</span> }
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Hugo Bash Script</title>
      <link>https://avdlii.xyz/posts/hugo-bash-script/</link>
      <pubDate>Tue, 25 Jun 2024 14:45:01 +0800</pubDate>
      
      <guid>https://avdlii.xyz/posts/hugo-bash-script/</guid>
      <description>Bash script for creating and publishing blog post</description>
      <content:encoded><![CDATA[<p>As promised, I have created a working bash script for my blog workflow. This makes my entire workflow very efficient and fun!</p>
<p>This is my entire bash script:</p>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#8ec07c">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#8ec07c"></span>
</span></span><span style="display:flex;"><span>blogdir<span style="color:#fe8019">=</span>~/blog
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>newpost<span style="color:#fe8019">()</span> <span style="color:#fe8019">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#fabd2f">read</span> -p <span style="color:#b8bb26">&#34;Enter post filename: &#34;</span> post_filename
</span></span><span style="display:flex;"><span>        hugo_post<span style="color:#fe8019">=</span>content/posts/$post_filename.md
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#fabd2f">cd</span> $blogdir
</span></span><span style="display:flex;"><span>        hugo new $hugo_post
</span></span><span style="display:flex;"><span>        nvim $hugo_post -c :NoNeckPain
</span></span><span style="display:flex;"><span><span style="color:#fe8019">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>publish_post<span style="color:#fe8019">()</span> <span style="color:#fe8019">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#fabd2f">read</span> -p <span style="color:#b8bb26">&#34;Enter commit message: &#34;</span> commit_message
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        gh_main<span style="color:#fe8019">=</span>~/blog-gh/main/
</span></span><span style="display:flex;"><span>        gh_pages<span style="color:#fe8019">=</span>~/blog-gh/ghpages/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#fabd2f">cd</span> $blogdir
</span></span><span style="display:flex;"><span>        hugo -d $gh_main
</span></span><span style="display:flex;"><span>        hugo -d $gh_pages
</span></span><span style="display:flex;"><span>        <span style="color:#fabd2f">echo</span> -e <span style="color:#b8bb26">&#39;\n&#39;</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#928374;font-style:italic"># commit and push to main branch</span>
</span></span><span style="display:flex;"><span>        <span style="color:#fabd2f">cd</span> $gh_main
</span></span><span style="display:flex;"><span>        <span style="color:#fabd2f">echo</span> <span style="color:#b8bb26">&#34;-------Main Branch-------&#34;</span>
</span></span><span style="display:flex;"><span>        git add .
</span></span><span style="display:flex;"><span>        git commit -m <span style="color:#b8bb26">&#34;</span>$commit_message<span style="color:#b8bb26">&#34;</span>
</span></span><span style="display:flex;"><span>        git push
</span></span><span style="display:flex;"><span>        <span style="color:#fabd2f">echo</span> -e <span style="color:#b8bb26">&#39;\n&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#928374;font-style:italic"># commit and push to gh-pages branch</span>
</span></span><span style="display:flex;"><span>        <span style="color:#fabd2f">cd</span> $gh_pages
</span></span><span style="display:flex;"><span>        <span style="color:#fabd2f">echo</span> <span style="color:#b8bb26">&#34;-------gh-pages Branch-------&#34;</span>
</span></span><span style="display:flex;"><span>        git add .
</span></span><span style="display:flex;"><span>        git commit -m <span style="color:#b8bb26">&#34;</span>$commit_message<span style="color:#b8bb26">&#34;</span>
</span></span><span style="display:flex;"><span>        git push
</span></span><span style="display:flex;"><span>        <span style="color:#fabd2f">echo</span> <span style="color:#b8bb26">&#34;-----------------------------&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#fabd2f">echo</span> -e <span style="color:#b8bb26">&#39;\n&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#fe8019">if</span> <span style="color:#fe8019">[[</span> $? -eq <span style="color:#d3869b">0</span> <span style="color:#fe8019">]]</span>
</span></span><span style="display:flex;"><span>                <span style="color:#fe8019">then</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#fabd2f">echo</span> <span style="color:#b8bb26">&#34;Blog published.&#34;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#fabd2f">echo</span> -e <span style="color:#b8bb26">&#39;\n&#39;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#fe8019">else</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#fabd2f">echo</span> <span style="color:#b8bb26">&#34;Push unsuccessful.&#34;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#fabd2f">echo</span> -e <span style="color:#b8bb26">&#39;\n&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#fe8019">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#fe8019">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fe8019">case</span> $1 in
</span></span><span style="display:flex;"><span>        new<span style="color:#fe8019">)</span>
</span></span><span style="display:flex;"><span>                newpost
</span></span><span style="display:flex;"><span>                ;;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        publish<span style="color:#fe8019">)</span>
</span></span><span style="display:flex;"><span>                publish_post
</span></span><span style="display:flex;"><span>                ;;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#b8bb26">&#34;&#34;</span><span style="color:#fe8019">)</span>
</span></span><span style="display:flex;"><span>                <span style="color:#928374;font-style:italic"># If no parameter is provided, hugo will </span>
</span></span><span style="display:flex;"><span>                <span style="color:#928374;font-style:italic"># serve existing blog iteration at localhost:1313</span>
</span></span><span style="display:flex;"><span>                <span style="color:#fabd2f">cd</span> ~/blog/
</span></span><span style="display:flex;"><span>                hugo serve
</span></span><span style="display:flex;"><span>                ;;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        *<span style="color:#fe8019">)</span>
</span></span><span style="display:flex;"><span>                <span style="color:#fabd2f">echo</span> <span style="color:#b8bb26">&#34;Invalid parameter.&#34;</span>
</span></span><span style="display:flex;"><span>                ;;
</span></span><span style="display:flex;"><span><span style="color:#fe8019">esac</span>
</span></span></code></pre></div><p>I had a lot of fun in researching and making this. Now I wonder what else can I automate..</p>
<p>By the way, this post is posted using this very script:
<img loading="lazy" src="/pic1.png" type="" alt="blog post using script"  /></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>My Hugo Workflow</title>
      <link>https://avdlii.xyz/posts/hugo-script/</link>
      <pubDate>Mon, 24 Jun 2024 20:14:41 +0800</pubDate>
      
      <guid>https://avdlii.xyz/posts/hugo-script/</guid>
      <description>Bash script for my Hugo blog post workflow</description>
      <content:encoded><![CDATA[<p>I am contemplating on making a script for automating my posting workflow as there have been repititions that I think can be completely automated.</p>
<p>Below I will try my best to illustrate the said workflow using Go ASCII Tool for Markdown. Please forgive my crude attempt:</p>



<div class="goat svg-container ">
  
    <svg
      xmlns="http://www.w3.org/2000/svg"
      font-family="Menlo,Lucida Console,monospace"
      
        viewBox="0 0 552 521"
      >
      <g transform='translate(8,16)'>
<path d='M 0,0 L 112,0' fill='none' stroke='currentColor'></path>
<path d='M 120,16 L 376,16' fill='none' stroke='currentColor'></path>
<path d='M 0,48 L 56,48' fill='none' stroke='currentColor'></path>
<path d='M 56,48 L 112,48' fill='none' stroke='currentColor'></path>
<path d='M 0,112 L 112,112' fill='none' stroke='currentColor'></path>
<path d='M 0,144 L 56,144' fill='none' stroke='currentColor'></path>
<path d='M 56,144 L 112,144' fill='none' stroke='currentColor'></path>
<path d='M 0,192 L 112,192' fill='none' stroke='currentColor'></path>
<path d='M 152,192 L 288,192' fill='none' stroke='currentColor'></path>
<path d='M 328,192 L 376,192' fill='none' stroke='currentColor'></path>
<path d='M 376,192 L 424,192' fill='none' stroke='currentColor'></path>
<path d='M 112,208 L 144,208' fill='none' stroke='currentColor'></path>
<path d='M 288,208 L 320,208' fill='none' stroke='currentColor'></path>
<path d='M 328,224 L 424,224' fill='none' stroke='currentColor'></path>
<path d='M 0,240 L 112,240' fill='none' stroke='currentColor'></path>
<path d='M 152,240 L 224,240' fill='none' stroke='currentColor'></path>
<path d='M 224,240 L 288,240' fill='none' stroke='currentColor'></path>
<path d='M 160,288 L 288,288' fill='none' stroke='currentColor'></path>
<path d='M 160,320 L 224,320' fill='none' stroke='currentColor'></path>
<path d='M 224,320 L 288,320' fill='none' stroke='currentColor'></path>
<path d='M 160,368 L 288,368' fill='none' stroke='currentColor'></path>
<path d='M 160,416 L 224,416' fill='none' stroke='currentColor'></path>
<path d='M 224,416 L 288,416' fill='none' stroke='currentColor'></path>
<path d='M 160,464 L 288,464' fill='none' stroke='currentColor'></path>
<path d='M 160,496 L 288,496' fill='none' stroke='currentColor'></path>
<path d='M 0,0 L 0,48' fill='none' stroke='currentColor'></path>
<path d='M 0,112 L 0,144' fill='none' stroke='currentColor'></path>
<path d='M 0,192 L 0,240' fill='none' stroke='currentColor'></path>
<path d='M 56,48 L 56,96' fill='none' stroke='currentColor'></path>
<path d='M 56,144 L 56,176' fill='none' stroke='currentColor'></path>
<path d='M 112,0 L 112,16' fill='none' stroke='currentColor'></path>
<path d='M 112,16 L 112,48' fill='none' stroke='currentColor'></path>
<path d='M 112,112 L 112,144' fill='none' stroke='currentColor'></path>
<path d='M 112,192 L 112,208' fill='none' stroke='currentColor'></path>
<path d='M 112,208 L 112,240' fill='none' stroke='currentColor'></path>
<path d='M 152,192 L 152,240' fill='none' stroke='currentColor'></path>
<path d='M 160,288 L 160,320' fill='none' stroke='currentColor'></path>
<path d='M 160,368 L 160,416' fill='none' stroke='currentColor'></path>
<path d='M 160,464 L 160,496' fill='none' stroke='currentColor'></path>
<path d='M 224,240 L 224,272' fill='none' stroke='currentColor'></path>
<path d='M 224,320 L 224,352' fill='none' stroke='currentColor'></path>
<path d='M 224,416 L 224,448' fill='none' stroke='currentColor'></path>
<path d='M 288,192 L 288,208' fill='none' stroke='currentColor'></path>
<path d='M 288,208 L 288,240' fill='none' stroke='currentColor'></path>
<path d='M 288,288 L 288,320' fill='none' stroke='currentColor'></path>
<path d='M 288,368 L 288,416' fill='none' stroke='currentColor'></path>
<path d='M 288,464 L 288,496' fill='none' stroke='currentColor'></path>
<path d='M 328,192 L 328,224' fill='none' stroke='currentColor'></path>
<path d='M 376,16 L 376,192' fill='none' stroke='currentColor'></path>
<path d='M 424,192 L 424,224' fill='none' stroke='currentColor'></path>
<path d='M 56,96 L 56,104' fill='none' stroke='currentColor'></path>
<polygon points='72.000000,96.000000 60.000000,90.400002 60.000000,101.599998' fill='currentColor' transform='rotate(90.000000, 56.000000, 96.000000)'></polygon>
<path d='M 56,176 L 56,184' fill='none' stroke='currentColor'></path>
<polygon points='72.000000,176.000000 60.000000,170.399994 60.000000,181.600006' fill='currentColor' transform='rotate(90.000000, 56.000000, 176.000000)'></polygon>
<polygon points='128.000000,16.000000 116.000000,10.400000 116.000000,21.600000' fill='currentColor' transform='rotate(180.000000, 120.000000, 16.000000)'></polygon>
<polygon points='152.000000,208.000000 140.000000,202.399994 140.000000,213.600006' fill='currentColor' transform='rotate(0.000000, 144.000000, 208.000000)'></polygon>
<path d='M 224,272 L 224,280' fill='none' stroke='currentColor'></path>
<polygon points='240.000000,272.000000 228.000000,266.399994 228.000000,277.600006' fill='currentColor' transform='rotate(90.000000, 224.000000, 272.000000)'></polygon>
<path d='M 224,352 L 224,360' fill='none' stroke='currentColor'></path>
<polygon points='240.000000,352.000000 228.000000,346.399994 228.000000,357.600006' fill='currentColor' transform='rotate(90.000000, 224.000000, 352.000000)'></polygon>
<path d='M 224,448 L 224,456' fill='none' stroke='currentColor'></path>
<polygon points='240.000000,448.000000 228.000000,442.399994 228.000000,453.600006' fill='currentColor' transform='rotate(90.000000, 224.000000, 448.000000)'></polygon>
<polygon points='328.000000,208.000000 316.000000,202.399994 316.000000,213.600006' fill='currentColor' transform='rotate(0.000000, 320.000000, 208.000000)'></polygon>
<text text-anchor='middle' x='8' y='132' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='8' y='212' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='16' y='132' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='16' y='212' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='24' y='20' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='24' y='132' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='24' y='212' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='32' y='132' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='32' y='212' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='40' y='228' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'>c</text>
<text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='48' y='132' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='48' y='212' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='48' y='228' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='56' y='20' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='56' y='132' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='56' y='212' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='56' y='228' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='64' y='132' fill='currentColor' style='font-size:1em'>w</text>
<text text-anchor='middle' x='64' y='212' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='64' y='228' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='72' y='20' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='72' y='212' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='80' y='20' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='80' y='132' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='80' y='212' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='88' y='132' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='88' y='212' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='96' y='20' fill='currentColor' style='font-size:1em'>/</text>
<text text-anchor='middle' x='96' y='132' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='96' y='212' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='104' y='132' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='104' y='212' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='128' y='132' fill='currentColor' style='font-size:1em'>~</text>
<text text-anchor='middle' x='136' y='132' fill='currentColor' style='font-size:1em'>/</text>
<text text-anchor='middle' x='144' y='132' fill='currentColor' style='font-size:1em'>b</text>
<text text-anchor='middle' x='152' y='132' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='160' y='132' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='160' y='212' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='168' y='132' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='168' y='212' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='168' y='308' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='168' y='404' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='176' y='212' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='176' y='308' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='176' y='388' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='176' y='404' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='176' y='484' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='184' y='308' fill='currentColor' style='font-size:1em'>-</text>
<text text-anchor='middle' x='184' y='388' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='184' y='404' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='184' y='484' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='192' y='212' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='192' y='228' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='192' y='308' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='192' y='388' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='192' y='404' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='192' y='484' fill='currentColor' style='font-size:1em'>b</text>
<text text-anchor='middle' x='200' y='212' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='200' y='228' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='200' y='308' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='200' y='388' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='200' y='404' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='200' y='484' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='208' y='212' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='208' y='228' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='208' y='308' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='208' y='388' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='208' y='404' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='208' y='484' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='216' y='212' fill='currentColor' style='font-size:1em'>,</text>
<text text-anchor='middle' x='216' y='228' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='216' y='308' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='216' y='388' fill='currentColor' style='font-size:1em'>b</text>
<text text-anchor='middle' x='216' y='404' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='216' y='484' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='224' y='308' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='224' y='484' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='232' y='212' fill='currentColor' style='font-size:1em'>c</text>
<text text-anchor='middle' x='232' y='228' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='232' y='388' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='232' y='404' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='240' y='212' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='240' y='228' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='240' y='308' fill='currentColor' style='font-size:1em'>b</text>
<text text-anchor='middle' x='240' y='388' fill='currentColor' style='font-size:1em'>c</text>
<text text-anchor='middle' x='240' y='404' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='240' y='484' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='248' y='212' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='248' y='228' fill='currentColor' style='font-size:1em'>:</text>
<text text-anchor='middle' x='248' y='308' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='248' y='388' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='248' y='484' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='256' y='212' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='256' y='308' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='256' y='388' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='256' y='404' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='256' y='484' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='264' y='212' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='264' y='308' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='264' y='388' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='264' y='404' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='264' y='484' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='272' y='212' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='272' y='308' fill='currentColor' style='font-size:1em'>c</text>
<text text-anchor='middle' x='272' y='388' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='272' y='404' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='280' y='212' fill='currentColor' style='font-size:1em'>,</text>
<text text-anchor='middle' x='280' y='308' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='280' y='404' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='304' y='308' fill='currentColor' style='font-size:1em'>~</text>
<text text-anchor='middle' x='312' y='308' fill='currentColor' style='font-size:1em'>/</text>
<text text-anchor='middle' x='320' y='308' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='328' y='308' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='336' y='212' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='336' y='308' fill='currentColor' style='font-size:1em'>b</text>
<text text-anchor='middle' x='344' y='212' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='344' y='308' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='352' y='212' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='352' y='308' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='360' y='212' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='360' y='308' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='368' y='308' fill='currentColor' style='font-size:1em'>/</text>
<text text-anchor='middle' x='376' y='212' fill='currentColor' style='font-size:1em'>b</text>
<text text-anchor='middle' x='376' y='308' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='384' y='212' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='384' y='308' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='392' y='212' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='392' y='308' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='400' y='212' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='400' y='308' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='408' y='212' fill='currentColor' style='font-size:1em'>c</text>
<text text-anchor='middle' x='408' y='308' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='416' y='212' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='416' y='308' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='424' y='308' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='440' y='212' fill='currentColor' style='font-size:1em'>~</text>
<text text-anchor='middle' x='448' y='212' fill='currentColor' style='font-size:1em'>/</text>
<text text-anchor='middle' x='456' y='212' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='464' y='212' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='472' y='212' fill='currentColor' style='font-size:1em'>b</text>
<text text-anchor='middle' x='480' y='212' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='488' y='212' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='496' y='212' fill='currentColor' style='font-size:1em'>g</text>
<text text-anchor='middle' x='504' y='212' fill='currentColor' style='font-size:1em'>/</text>
<text text-anchor='middle' x='512' y='212' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='520' y='212' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='528' y='212' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='536' y='212' fill='currentColor' style='font-size:1em'>n</text>
</g>

    </svg>
  
</div>
<p>As you can see, the flow is quite repetitive. I think It can be very efficient if convert this into a script. So that I can focus my attention entirely on the post itself.</p>
<p>&ldquo;This is the way.&rdquo;</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setting Up Kubernetes Using Kubeadm</title>
      <link>https://avdlii.xyz/posts/kubeadm/</link>
      <pubDate>Mon, 24 Jun 2024 16:24:19 +0800</pubDate>
      
      <guid>https://avdlii.xyz/posts/kubeadm/</guid>
      <description>Creating a working kubernetes cluster from scratch</description>
      <content:encoded><![CDATA[<p>When I am first learning about <strong>Kubernetes</strong>, I am using <code>minikube</code>. But it was all too easy. I want to learn how to set it up from the ground up. What packages are involved, what dependencies, what configuration files should I look for. The answer to this is <code>kubeadm</code>.</p>
<p><code>kubeadm</code> is a command line tool that lets me create a <strong>Kubernetes</strong> cluster from scratch. But before I can use<code>kubeadm</code>, I have to install some packages and configure some os-level stuff.</p>
<p>I will use <strong>Red Hat Enterprise Linux (RHEL)</strong> to run my <strong>Kubernetes</strong> cluster. These are the steps in  broad strokes:</p>
<ol>
<li>Install all <code>kubernetes</code> package dependencies</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>dnf install curl gpg ca-certificates iproute-tc -y
</span></span></code></pre></div><ol start="2">
<li>Create and activate modprobe modules for <strong>Kubernetes</strong> networking</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>touch /etc/modules-load.d/containerd.conf
</span></span><span style="display:flex;"><span><span style="color:#fabd2f">echo</span> <span style="color:#b8bb26">&#34;overlay&#34;</span> &gt; /etc/modules-load.d/containerd.conf
</span></span><span style="display:flex;"><span><span style="color:#fabd2f">echo</span> <span style="color:#b8bb26">&#34;br_netfilter&#34;</span> &gt;&gt; /etc/modules-load.d/containerd.conf
</span></span><span style="display:flex;"><span>modprobe overlay
</span></span><span style="display:flex;"><span>modprobe br_netfilter
</span></span></code></pre></div><ol start="3">
<li>Configure kernel parameters using <code>sysctl</code> for networking</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#fabd2f">echo</span> <span style="color:#b8bb26">&#34;net.bridge.bridge-nf-call-iptables = 1&#34;</span> &gt;&gt; /etc/sysctl.d/99-kubernetes-cri.conf
</span></span><span style="display:flex;"><span><span style="color:#fabd2f">echo</span> <span style="color:#b8bb26">&#34;net.bridge.bridge-nf-call-ip6tables = 1&#34;</span> &gt;&gt; /etc/sysctl.d/99-kubernetes-cri.conf
</span></span><span style="display:flex;"><span><span style="color:#fabd2f">echo</span> <span style="color:#b8bb26">&#34;net.ipv4.ip_forward = 1&#34;</span> &gt;&gt; /etc/sysctl.d/99-kubernetes-cri.conf
</span></span><span style="display:flex;"><span>sysctl --system
</span></span></code></pre></div><ol start="4">
<li>Download and setup <code>containerd</code></li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wget https://github.com/containerd/containerd/releases/download/v1.7.16/containerd-1.7.16-linux-amd64.tar.gz -P /tmp/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>tar Cxzvf /usr/local /tmp/containerd-1.7.16-linux-amd64.tar.gz
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service -P /etc/systemd/system
</span></span></code></pre></div><ol start="5">
<li>Download and setup <code>runc</code></li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wget https://github.com/opencontainers/runc/releases/download/v1.1.12/runc.amd64 -P /tmp/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>dnf install -m <span style="color:#d3869b">755</span> /tmp/runc.amd64 /usr/local/sbin/runc
</span></span></code></pre></div><ol start="6">
<li>Download and configure <code>cni</code></li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wget https://github.com/containernetworking/plugins/releases/download/v1.4.0/cni-plugins-linux-amd64-v1.4.0.tgz -P /tmp/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mkdir -p /opt/cni/bin
</span></span><span style="display:flex;"><span>tar Cxvzf /opt/cni/bin /tmp/cni-plugins-linux-amd64-v1.4.0.tgz
</span></span></code></pre></div><ol start="7">
<li>Disable swap on OS</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vi /etc/fstab <span style="color:#928374;font-style:italic"># comment-out the line with SWAP</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>swapoff -a
</span></span></code></pre></div><ol start="8">
<li>Setup the <strong>Kubernetes</strong> repository on the server</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vi /etc/yum.repos.d/kubernetes.repo
</span></span><span style="display:flex;"><span><span style="color:#fe8019">[</span>kubernetes<span style="color:#fe8019">]</span>
</span></span><span style="display:flex;"><span>name<span style="color:#fe8019">=</span>Kubernetes
</span></span><span style="display:flex;"><span>baseurl<span style="color:#fe8019">=</span>https://pkgs.k8s.io/core:/stable:/v1.30/rpm/
</span></span><span style="display:flex;"><span>enabled<span style="color:#fe8019">=</span><span style="color:#d3869b">1</span>
</span></span><span style="display:flex;"><span>gpgcheck<span style="color:#fe8019">=</span><span style="color:#d3869b">1</span>
</span></span><span style="display:flex;"><span>gpgkey<span style="color:#fe8019">=</span>https://pkgs.k8s.io/core:/stable:/v1.30/rpm/repodata/repomd.xml.key
</span></span></code></pre></div><ol start="9">
<li>Download <strong>Kubernetes</strong> packages</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>dnf install  kubeadm kubelet kubectl
</span></span></code></pre></div><ol start="10">
<li>Create a <code>kubernetes control-plane</code> which will act as the main brain of the <strong>Kubernetes</strong> cluster</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubeadm init --pod-network-cidr 192.168.120.0/24 --kubernetes-version 1.30.0 --node-name k8s-control
</span></span></code></pre></div><ol start="11">
<li>Create <code>kubernetes workers</code> and join them to the <code>kubernetes control-plane</code> server</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#928374;font-style:italic"># run on control-plane</span>
</span></span><span style="display:flex;"><span>kubeadm token create --print-join-command
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#928374;font-style:italic"># run the output of previous command on worker node/s</span>
</span></span></code></pre></div><p>I know this is far from perfect but its definitely a start.</p>
<p>With this, I can further learn how <strong>Kubernetes</strong> works on a deeper level. One step at a time..</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Thoughts on Kubernetes</title>
      <link>https://avdlii.xyz/posts/thoughts-on-kubernetes/</link>
      <pubDate>Mon, 24 Jun 2024 15:02:03 +0800</pubDate>
      
      <guid>https://avdlii.xyz/posts/thoughts-on-kubernetes/</guid>
      <description>My thoughts on what attracted me in Kubernetes</description>
      <content:encoded><![CDATA[<p>In my previous role, my primary focus was on PostgreSQL databases, specifically in database setup, configuration, and infrastructure rather than on the SQL level. For instance, one of my tasks was establishing streaming replication between a master and two standby database servers.</p>
<p>I found this work incredibly exciting. I vividly remember the satisfaction of getting streaming replication working during my first week on the job. The ability to configure a system from scratch and see it replicate an entire database from one machine to another was exhilarating!</p>
<p>However, as you&rsquo;re likely aware, working with such systems comes with its challenges.</p>
<p>When the master server/node fails, one of the standby servers needs to take over as the new master. This process involves rebuilding the old master, which initially acts as a standby/slave before being promoted again to master. In my experience, this rebuilding process can be slow, particularly for large databases common in large enterprises. In a business environment where time is money, the extended rebuild times can pose significant challenges.</p>
<p>During my time in this role, a former colleague introduced me to an application running on something called <strong>Kubernetes</strong>. He demonstrated a feature where intentionally destroying one of the pods resulted in its automatic replacement without manual intervention or <code>ssh</code>-ing inside the pods to revive it.</p>
<p>Coming from a database background, this experience fascinated me. And that was just the tip of the kubernetes iceberg.</p>
<p>And into the rabbit hole I go..</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>My Online Blog</title>
      <link>https://avdlii.xyz/posts/my-blog/</link>
      <pubDate>Sun, 23 Jun 2024 15:00:46 +0800</pubDate>
      
      <guid>https://avdlii.xyz/posts/my-blog/</guid>
      <description>My first online blog made public</description>
      <content:encoded><![CDATA[<p>For my first post, I thought I would expound on the tech and tools powering this blog.</p>
<h1 id="linux">Linux</h1>
<p>Of course, Linux! I will be posting and writing my blog entries using Linux. This blog has also been configured and will be further configured using Linux.</p>
<h1 id="hugo">Hugo</h1>
<p>If you never heard of it, Hugo is an open-source site generator tool that has amazing customizability features. I can build and customize portions of my blog. I can add certain modules here and there with HTML and CSS.</p>
<p>In order to successfully launch this blog, I had to learn Hugo. The main configuration, page configuration, filesystem structure, what function every directory have, and so on. What fun.</p>
<h1 id="github-pages">Github Pages</h1>
<p>I deployed my blog in Github Pages, which is a hosting service provided by Github. It is easy to learn and deploy. Best of all: its free!</p>
<h1 id="github-actions">Github Actions</h1>
<p>Since I will be writing all my blog entries in my Linux command line, I have to utilize some kind of automation pipeline in order to update my Github Pages blog every time I commit an entry.</p>
<p>I found this <a href="https://theplaybook.dev/docs/deploy-hugo-to-github-pages/">blog</a> that have a Github Actions automation that will do just that. I studied it to familiarize myself with its process and not put it in my repository blindly without knowing how it works.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
