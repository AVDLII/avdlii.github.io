[{"content":"As promised, I have created a working bash script for my blog workflow. This makes my entire workflow very efficient and fun!\nThis is my entire bash script:\n#!/bin/bash blogdir=~/blog newpost() { read -p \u0026#34;Enter post filename: \u0026#34; post_filename hugo_post=content/posts/$post_filename.md cd $blogdir hugo new $hugo_post nvim $hugo_post -c :NoNeckPain } publish_post() { read -p \u0026#34;Enter commit message: \u0026#34; commit_message gh_main=~/blog-gh/main/ gh_pages=~/blog-gh/ghpages/ cd $blogdir hugo -d $gh_main hugo -d $gh_pages echo -e \u0026#39;\\n\u0026#39; # commit and push to main branch cd $gh_main echo \u0026#34;-------Main Branch-------\u0026#34; git add . git commit -m \u0026#34;$commit_message\u0026#34; git push echo -e \u0026#39;\\n\u0026#39; # commit and push to gh-pages branch cd $gh_pages echo \u0026#34;-------gh-pages Branch-------\u0026#34; git add . git commit -m \u0026#34;$commit_message\u0026#34; git push echo \u0026#34;-----------------------------\u0026#34; echo -e \u0026#39;\\n\u0026#39; if [[ $? -eq 0 ]] then echo \u0026#34;Blog published.\u0026#34; echo -e \u0026#39;\\n\u0026#39; else echo \u0026#34;Push unsuccessful.\u0026#34; echo -e \u0026#39;\\n\u0026#39; fi } case $1 in new) newpost ;; publish) publish_post ;; \u0026#34;\u0026#34;) # If no parameter is provided, hugo will # serve existing blog iteration at localhost:1313 cd ~/blog/ hugo serve ;; *) echo \u0026#34;Invalid parameter.\u0026#34; ;; esac I had a lot of fun in researching and making this. Now I wonder what else can I automate..\nBy the way, this post is posted using this very script: ","permalink":"https://avdlii.xyz/posts/hugo-bash-script/","summary":"As promised, I have created a working bash script for my blog workflow. This makes my entire workflow very efficient and fun!\nThis is my entire bash script:\n#!/bin/bash blogdir=~/blog newpost() { read -p \u0026#34;Enter post filename: \u0026#34; post_filename hugo_post=content/posts/$post_filename.md cd $blogdir hugo new $hugo_post nvim $hugo_post -c :NoNeckPain } publish_post() { read -p \u0026#34;Enter commit message: \u0026#34; commit_message gh_main=~/blog-gh/main/ gh_pages=~/blog-gh/ghpages/ cd $blogdir hugo -d $gh_main hugo -d $gh_pages echo -e \u0026#39;\\n\u0026#39; # commit and push to main branch cd $gh_main echo \u0026#34;-------Main Branch-------\u0026#34; git add .","title":"Hugo Bash Script"},{"content":"I am contemplating on making a script for automating my posting workflow as there have been repititions that I think can be completely automated.\nBelow I will try my best to illustrate the said workflow using Go ASCII Tool for Markdown. Please forgive my crude attempt:\nh h g u u i g g t p o o u h c l n g t l l e e m o w n l n e e p r o a / s t t e ~ / b l o g g i g t t h g r p - i i u a p p t g b d u a h g l d s g u e i , h e b r s s h c t a o o o b c n p m : r t o m a i p s i n o u t t c n s , h h ~ / g h m b a l i o n g / b g r h a p n a c g h e s ~ / g h b l o g / m a i n As you can see, the flow is quite repetitive. I think It can be very efficient if convert this into a script. So that I can focus my attention entirely on the post itself.\n\u0026ldquo;This is the way.\u0026rdquo;\n","permalink":"https://avdlii.xyz/posts/hugo-script/","summary":"I am contemplating on making a script for automating my posting workflow as there have been repititions that I think can be completely automated.\nBelow I will try my best to illustrate the said workflow using Go ASCII Tool for Markdown. Please forgive my crude attempt:\nh h g u u i g g t p o o u h c l n g t l l e e m o w n l n e e p r o a / s t t e ~ / b l o g g i g t t h g r p - i i u a p p t g b d u a h g l d s g u e i , h e b r s s h c t a o o o b c n p m : r t o m a i p s i n o u t t c n s , h h ~ / g h m b a l i o n g / b g r h a p n a c g h e s ~ / g h b l o g / m a i n As you can see, the flow is quite repetitive.","title":"Hugo Script"},{"content":"When I am first learning about Kubernetes, I am using minikube. But it was all too easy. I want to learn how to set it up from the ground up. What packages are involved, what dependencies, what configuration files should I look for. The answer to this is kubeadm.\nkubeadm is a command line command that lets me create a *Kubernetes cluster from scratch. But before I can usekubeadm, I have to install some packages and configure some os-level stuff.\nI will use Red Hat Enterprise Linux (RHEL) to run my Kubernetes cluster. These are the steps in broad strokes:\nInstall all kubernetes package dependencies Create and activate modprobe modules for Kubernetes networking Configure kernel parameters using sysctl for networking Download and setup containerd Download and setup runc Download and configure cni Disable swap on OS Setup the Kubernetes repository on the server Download Kubernetes packages Create a kubernetes control-plane which will act as the main brain of the Kubernetes cluster Create kubernetes workers and join them to the kubernetes control-plane server I know this is far from perfect but its definitely a start.\nWith this, I can further learn how Kubernetes works on a deeper level. One step at a time..\n","permalink":"https://avdlii.xyz/posts/kubeadm/","summary":"When I am first learning about Kubernetes, I am using minikube. But it was all too easy. I want to learn how to set it up from the ground up. What packages are involved, what dependencies, what configuration files should I look for. The answer to this is kubeadm.\nkubeadm is a command line command that lets me create a *Kubernetes cluster from scratch. But before I can usekubeadm, I have to install some packages and configure some os-level stuff.","title":"Setting Up Kubernetes Using Kubeadm"},{"content":"In my previous role, my primary focus was on PostgreSQL databases, specifically in database setup, configuration, and infrastructure rather than on the SQL level. For instance, one of my tasks was establishing streaming replication between a master and two standby database servers.\nI found this work incredibly exciting. I vividly remember the satisfaction of getting streaming replication working during my first week on the job. The ability to configure a system from scratch and see it replicate an entire database from one machine to another was exhilarating!\nHowever, as you\u0026rsquo;re likely aware, working with such systems comes with its challenges.\nWhen the master server/node fails, one of the standby servers needs to take over as the new master. This process involves rebuilding the old master, which initially acts as a standby/slave before being promoted again to master. In my experience, this rebuilding process can be slow, particularly for large databases common in large enterprises. In a business environment where time is money, the extended rebuild times can pose significant challenges.\nDuring my time in this role, a former colleague introduced me to an application running on something called Kubernetes. He demonstrated a feature where intentionally destroying one of the pods resulted in its automatic replacement without manual intervention or ssh-ing inside the pods to revive it.\nComing from a database background, this experience fascinated me. And that was just the tip of the kubernetes iceberg.\nAnd into the rabbit hole I go..\n","permalink":"https://avdlii.xyz/posts/thoughts-on-kubernetes/","summary":"In my previous role, my primary focus was on PostgreSQL databases, specifically in database setup, configuration, and infrastructure rather than on the SQL level. For instance, one of my tasks was establishing streaming replication between a master and two standby database servers.\nI found this work incredibly exciting. I vividly remember the satisfaction of getting streaming replication working during my first week on the job. The ability to configure a system from scratch and see it replicate an entire database from one machine to another was exhilarating!","title":"Thoughts on Kubernetes"},{"content":"For my first post, I thought I would expound on the tech and tools powering this blog.\nLinux Of course, Linux! I will be posting and writing my blog entries using Linux. This blog has also been configured and will be further configured using Linux.\nHugo If you never heard of it, Hugo is an open-source site generator tool that has amazing customizability features. I can build and customize portions of my blog. I can add certain modules here and there with HTML and CSS.\nIn order to successfully launch this blog, I had to learn Hugo. The main configuration, page configuration, filesystem structure, what function every directory have, and so on. What fun.\nGithub Pages I deployed my blog in Github Pages, which is a hosting service provided by Github. It is easy to learn and deploy. Best of all: its free!\nGithub Actions Since I will be writing all my blog entries in my Linux command line, I have to utilize some kind of automation pipeline in order to update my Github Pages blog every time I commit an entry.\nI found this blog that have a Github Actions automation that will do just that. I studied it to familiarize myself with its process and not put it in my repository blindly without knowing how it works.\n","permalink":"https://avdlii.xyz/posts/my-blog/","summary":"For my first post, I thought I would expound on the tech and tools powering this blog.\nLinux Of course, Linux! I will be posting and writing my blog entries using Linux. This blog has also been configured and will be further configured using Linux.\nHugo If you never heard of it, Hugo is an open-source site generator tool that has amazing customizability features. I can build and customize portions of my blog.","title":"My Online Blog"},{"content":"\u003c!DOCTYPE html\u003e My name is Agrielio, but you can call me Gio.\nI am very passionate about Linux and open-source as a general. I enjoy continually learning, experimenting with new concepts, and gaining insights from each experience.\nI believe learning is a lifelong journey, and we should continuously aim to improve in our chosen fields, whether in technology or other pursuits. That's why I consistently strive to exceed my yesterday's self. Even a 1% improvement every day can lead to significant accomplishments in the long run. Operating Systems\nRHEL\nUbuntu\nFedora\nCentOS\nDatabase\nPostgreSQL\nEnterpriseDB\nVersion Control\nGit\nGithub\nGitlab\nAutomation\nBash Script\nAnsible\nTerraform\nContainer and Orchestration\nDocker\nKubernetes\nVirtualization\n(On-prem and Cloud)\nVirtualBox\nKVM\nAWS\nOther Tools I Often Use\nAlacritty\nVim\nNeoVim\nTmux\nHugo\nDotfiles\n","permalink":"https://avdlii.xyz/aboutme/","summary":"\u003c!DOCTYPE html\u003e My name is Agrielio, but you can call me Gio.\nI am very passionate about Linux and open-source as a general. I enjoy continually learning, experimenting with new concepts, and gaining insights from each experience.\nI believe learning is a lifelong journey, and we should continuously aim to improve in our chosen fields, whether in technology or other pursuits. That's why I consistently strive to exceed my yesterday's self.","title":"Hello, friend."}]